org: kevinchan950120
app: aws-serverless
service: microservice-1

resources:
  Resources:
    # DynamoDB Tables
    UserTable: ${file(./src/databases/dynamodb/resources/users.resource.yml)}

    # RDS Subnet Groups
    # PostgresSubnetGroup: ${file(./src/databases/postgres/resources/subnet-group.resource.yml)}

    # RDS DB
    # Postgres: ${file(./src/databases/postgres/resources/instance.resource.yml)}

    # SQS
    MockSendEmailQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: mock-send-email-queue
        VisibilityTimeout: 30

params:
  dev:
    vpc_id: ${env:DEV_MICROSERVICE_VPC_ID}

    lambda_public_sg_ids: ${env:DEV_MICROSERVICE_LAMBDA_PUBLIC_SG_IDS}
    lambda_private_sg_ids: ${env:DEV_MICROSERVICE_LAMBDA_PRIVATE_SG_IDS}

    public_subnet_id_1: ${env:DEV_MICROSERVICE_PUBLIC_SUBNET_1A}
    public_subnet_id_2: ${env:DEV_MICROSERVICE_PUBLIC_SUBNET_1B}
    private_subnet_id_1: ${env:DEV_MICROSERVICE_PRIVATE_SUBNET_1A}
    private_subnet_id_2: ${env:DEV_MICROSERVICE_PRIVATE_SUBNET_1B}

    postgres_username: ${env:DEV_POSTGRES_MASTER_USER_NAME}
    postgres_password: ${env:DEV_POSTGRES_MASTER_USER_PASSWORD}

  default:
    vpc_id: ${env:DEV_MICROSERVICE_VPC_ID}

    lambda_public_sg_ids: ${env:DEV_MICROSERVICE_LAMBDA_PUBLIC_SG_IDS}
    lambda_private_sg_ids: ${env:DEV_MICROSERVICE_LAMBDA_PRIVATE_SG_IDS}

    public_subnet_id_1: ${env:DEV_MICROSERVICE_PUBLIC_SUBNET_1A}
    public_subnet_id_2: ${env:DEV_MICROSERVICE_PUBLIC_SUBNET_1B}
    private_subnet_id_1: ${env:DEV_MICROSERVICE_PRIVATE_SUBNET_1A}
    private_subnet_id_2: ${env:DEV_MICROSERVICE_PRIVATE_SUBNET_1B}

    postgres_username: ${env:DEV_POSTGRES_MASTER_USER_NAME}
    postgres_password: ${env:DEV_POSTGRES_MASTER_USER_PASSWORD}

custom:
  esbuild:
    sourcemap: true

package:
  individually: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1
  environment:
    JSONPLACEHOLDER_BASE_URL: ${env:JSONPLACEHOLDER_BASE_URL}
    SCAN_CONCURRENCY: ${env:SCAN_CONCURRENCY}
    AWS_ACCOUNT_ID: ${aws:accountId}
    AWS_REGION: ${aws:region}

  iam:
    role:
      statements:
        # DynamoDB
        - Effect: Allow
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/*
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable

        # RDS
        - Effect: Allow
          Resource: arn:aws:rds:${aws:region}:${aws:accountId}:db/microservices
          Action:
            - rds:CreateDBInstance
            - rds:ModifyDBInstance
            - rds:DescribeDBInstances
            - rds:DeleteDBInstance
            - rds:CreateDBCluster
            - rds:ModifyDBCluster
            - rds:DeleteDBCluster
            - rds:DescribeDBClusters

        - Effect: Allow
          Action:
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSubnets
            - ec2:DescribeVpcs
            - ec2:DescribeVpcEndpoints
          Resource: "*"

        # SQS
        - Effect: Allow
          Action:
            - sqs:CreateQueue
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            - sqs:GetQueueUrl
          Resource: "*"

  # Commented for free tier purpose
  # vpc:
  #   securityGroupIds:
  #     - ${param:lambda_private_sg_ids}
  #   subnetIds:
  #     - ${param:private_subnet_id_1}
  #     - ${param:private_subnet_id_2}

functions:
  # API Functions
  ## Posts service
  retrieve-posts:
    handler: src/services/posts/index.retrievePostsHandler
    timeout: 30
    events:
      - httpApi:
          method: GET
          path: /posts/retrieve-posts

  ## Users service
  create-user:
    handler: src/services/users/index.createUserHandler
    timeout: 30
    events:
      - httpApi:
          method: POST
          path: /users/create-user

  get-users:
    handler: src/services/users/index.getUsersHandler
    timeout: 30
    events:
      - httpApi:
          method: GET
          path: /users

  get-user-by-email:
    handler: src/services/users/index.getUserByEmailHandler
    timeout: 30
    events:
      - httpApi:
          method: GET
          path: /users/get-user-by-email

  update-user:
    handler: src/services/users/index.updateUserHandler
    timeout: 30
    events:
      - httpApi:
          method: PUT
          path: /users/{contact}

  # SQS Functions
  mock-send-email:
    handler: src/services/sqs/index.mockSendEmailHandler
    timeout: 30
    events:
      - sqs:
          arn: arn:aws:sqs:ap-southeast-1:${aws:accountId}:mock-send-email-queue
          maximumBatchingWindow: 10 # Optional, all the queues within 10 secs starting from the moment of the first message comes in will be executed at once
          functionResponseType: ReportBatchItemFailures # if some message fail, only failed message stay in the queue
