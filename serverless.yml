org: kevinchan950120
app: aws-serverless
service: microservice-1

resources:
  Resources:
    # DynamoDB Tables
    UserTable: ${file(./src/databases/dynamodb/schemas/users.schema.yml)}

    # RDS Subnet Groups
    PostgresSubnetGroup:
      Type: "AWS::RDS::DBSubnetGroup"
      Properties:
        DBSubnetGroupName: postgressubnetgroup
        DBSubnetGroupDescription: "Subnet group for RDS instance"
        SubnetIds:
          - ${param:private_subnet_id_1}
          - ${param:private_subnet_id_2}

    # RDS DB
    Postgres:
      Type: "AWS::RDS::DBInstance"
      Properties:
        DBInstanceClass: "db.t3.micro"
        Engine: "postgres"
        DBName: "microservices"
        MasterUsername: ${param:postgres_username}
        MasterUserPassword: ${param:postgres_password}
        PubliclyAccessible: false
        AllocatedStorage: 20
        DBSubnetGroupName: postgressubnetgroup
        VPCSecurityGroups:
          - ${param:security_group_ids}

params:
  dev:
    vpc_id: ${env:DEV_MICROSERVICE_VPC_ID}
    security_group_ids: ${env:DEV_MICROSERVICE_SECURITY_GROUP_IDS}
    public_subnet_id_1: ${env:DEV_MICROSERVICE_PUBLIC_SUBNET_1A}
    public_subnet_id_2: ${env:DEV_MICROSERVICE_PUBLIC_SUBNET_1B}
    private_subnet_id_1: ${env:DEV_MICROSERVICE_PRIVATE_SUBNET_1A}
    private_subnet_id_2: ${env:DEV_MICROSERVICE_PRIVATE_SUBNET_1B}
    postgres_username: ${env:DEV_POSTGRES_MASTER_USER_NAME}
    postgres_password: ${env:DEV_POSTGRES_MASTER_USER_PASSWORD}

  default:
    vpc_id: ${env:DEV_MICROSERVICE_VPC_ID}
    security_group_ids: ${env:DEV_MICROSERVICE_SECURITY_GROUP_IDS}
    public_subnet_id_1: ${env:DEV_MICROSERVICE_PUBLIC_SUBNET_1A}
    public_subnet_id_2: ${env:DEV_MICROSERVICE_PUBLIC_SUBNET_1B}
    private_subnet_id_1: ${env:DEV_MICROSERVICE_PRIVATE_SUBNET_1A}
    private_subnet_id_2: ${env:DEV_MICROSERVICE_PRIVATE_SUBNET_1B}
    postgres_username: ${env:DEV_POSTGRES_MASTER_USER_NAME}
    postgres_password: ${env:DEV_POSTGRES_MASTER_USER_PASSWORD}

custom:
  esbuild:
    sourcemap: true

package:
  individually: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1
  environment:
    JSONPLACEHOLDER_BASE_URL: ${env:JSONPLACEHOLDER_BASE_URL}
    SCAN_CONCURRENCY: ${env:SCAN_CONCURRENCY}
    DEV_POSTGRES_DATABASE_URL: ${env:DEV_POSTGRES_DATABASE_URL}

  iam:
    role:
      statements:
        # DynamoDB
        - Effect: Allow
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/*
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable

        # RDS
        - Effect: Allow
          Action:
            - rds:CreateDBInstance
            - rds:ModifyDBInstance
            - rds:DescribeDBInstances
            - rds:DeleteDBInstance
            - rds:CreateDBCluster
            - rds:ModifyDBCluster
            - rds:DeleteDBCluster
            - rds:DescribeDBClusters
          Resource: arn:aws:rds:${aws:region}:${aws:accountId}:db/microservices

        - Effect: Allow
          Action:
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSubnets
          Resource: "*"

  vpc:
    securityGroupIds:
      - ${param:security_group_ids}
    subnetIds:
      - ${param:private_subnet_id_1}
      - ${param:private_subnet_id_2}

functions:
  retrieve-posts:
    handler: src/services/posts/index.retrievePostsHandler
    timeout: 30
    vpc:
      securityGroupIds:
        - ${param:security_group_ids}
      subnetIds:
        - ${param:public_subnet_id_1} # This lambda will need internet access to call external api, so it need to be deployed in a public subnet
        - ${param:public_subnet_id_2}
    events:
      - httpApi:
          method: GET
          path: /posts/retrieve-posts

  create-user:
    handler: src/services/users/index.createUserHandler
    timeout: 30
    events:
      - httpApi:
          method: POST
          path: /users/create-user

  get-users:
    handler: src/services/users/index.getUsersHandler
    timeout: 30
    events:
      - httpApi:
          method: GET
          path: /users

  get-user-by-email:
    handler: src/services/users/index.getUserByEmailHandler
    timeout: 30
    events:
      - httpApi:
          method: GET
          path: /users/get-user-by-email

  update-user:
    handler: src/services/users/index.updateUserHandler
    timeout: 30
    events:
      - httpApi:
          method: PUT
          path: /users/{contact}
